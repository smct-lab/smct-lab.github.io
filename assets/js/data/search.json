[ { "title": "Java Spring Toy Project 01 편 - 프로젝트 시작하기", "url": "/posts/start-spring-project/", "categories": "자바, Spring", "tags": "java, spring, backend, toy-project", "date": "2022-09-16 15:06:00 +0900", "snippet": "토이 프로젝트 시작 계기처음에는 작았던 프로젝트의 규모가 점점 커지기 시작하면서 프로젝트 구조에서 불편함을 느끼기 시작했습니다.그 이유는 바로 공통(Common) 모듈… cms 와 web, mobile api 를 만들기 위해서 Entity, Repository, 서비스 레이어 등 공통으로 사용할만한 것들을 Common 모듈에 전부 때려박은 것이 불행의 시작이었습니다 ㅠㅠ…무엇보다도 가장 불편했던 것은 데이터베이스 의존성이었습니다. 멀티데이터베이스를 사용하는 환경에서 원하는 데이터베이스만 선택적으로 등록하기 까다로웠거든요… 조건부 애노테이션을 달아서 해결했지만 해당 데이터베이스를 사용하는 모든 서비스 레이어에 애노테이션을 달아줘야하는게 코드 보기에도 지저분했습니다. 그 밖에도 Common 모듈이 요구하는 프로퍼티 값에 의한 의존성 스트레스는 나날이 커져갔습니다.그러다가 우아한형제들 기술블로그에서 멀티모듈 설계 이야기라는 글을 발견했습니다. 공통(Common) 모듈의 저주… 지금 프로젝트가 딱 이 상황이더군요 ㅠㅠ… 저자분께서 멀티 모듈 설계 노하우를 정말 깔끔하게 설명해주신 덕분에 이 글을 참고해서 잘 설계된 작은 프로젝트를 만들어보자는 생각을 하게됐습니다. :)프로젝트 시작하기위 글을 참고하여 크게 5개 모듈 종류로 나누었습니다. servers (apllication) clients (in system available) domain (system domain) core (system core) modules (independently available)차근차근 진행하기 위해서 일단 spring initializr 에서 프로젝트를 대충 생성한 후 servers 에 애플리케이션을 추가해보겠습니다.개발 환경은 다음과 같습니다. java 8 spring boot 2.7.2 gradle 7.5먼저 프로젝트 전체에서 사용할 의존성을 설정해줬습니다.buildscript {\text {\t\tspringBootVersion = '2.7.2'\t}\trepositories {\t\tmavenCentral()\t}\tdependencies {\t\tclasspath \"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\"\t\tclasspath \"io.spring.gradle:dependency-management-plugin:1.0.13.RELEASE\"\t}}subprojects {\tapply plugin: 'java'\tapply plugin: 'java-library'\tapply plugin: 'org.springframework.boot'\tapply plugin: 'io.spring.dependency-management'\tgroup = 'com.smctlab'\tversion = '0.0.1-SNAPSHOT'\tsourceCompatibility = '1.8'\ttargetCompatibility = '1.8'\tcompileJava.options.encoding = 'UTF-8'\trepositories {\t\tmavenCentral()\t}\tdependencies {\t\timplementation 'org.springframework.boot:spring-boot-starter-web:2.7.2'\t\tcompileOnly 'org.projectlombok:lombok'\t\tdevelopmentOnly 'org.springframework.boot:spring-boot-devtools'\t\tannotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\t\tannotationProcessor 'org.projectlombok:lombok'\t\ttestImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.2'\t\ttestImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'\t\ttestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\t}\ttest {\t\tuseJUnitPlatform()\t}}Intellij 모듈 추가 기능을 이용해 servers.api-server 모듈을 생성해주면 settings.gradle 에 다음과 같이 추가됩니다.rootProject.name = 'toyboard'include 'servers:api-server'findProject(':servers:api-server')?.name = 'api-server'그 다음엔 애플리케이션에 필요한 의존성을 추가해줬습니다.bootJar { enabled = true duplicatesStrategy = DuplicatesStrategy.EXCLUDE}dependencies { implementation 'org.springframework.boot:spring-boot-starter-security:2.7.2' // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.2' // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt implementation 'io.jsonwebtoken:jjwt:0.9.1' // https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter implementation 'io.springfox:springfox-boot-starter:3.0.0' testImplementation 'org.springframework.security:spring-security-test:5.7.2'}위에서부터 순서대로 각각 기능은 이렇습니다. spring security validation jwt swagger실행 후 http://localhost:8080/ 에 접속했을 때 Whitelabel Error Page 가 나오면 준비는 끝났습니다~ XDTomcat -&gt; Undertow이제 Tomcat 을 Undertow 로 교체해보겠습니다.// Use undertow instead tomcat.// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-undertowimplementation 'org.springframework.boot:spring-boot-starter-undertow:2.7.2'implementation ('org.springframework.boot:spring-boot-starter-web:2.7.2') { exclude module: 'spring-boot-starter-tomcat'}교체는 매우 간단하게, Tomcat 을 exclude 시켜주고 Undertow 로 대체해주면 됩니다.Failed to start bean 'documentationPluginsBootstrapper';만약 해당 에러가 발생한다면 swagger 때문에 생긴 에러입니다. 프로퍼티에 아래 설정을 추가해서 해결해줍니다.spring.mvc.pathmatch.matching-strategy=ant_path_matcher" }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "기타, 블로그", "tags": "blogging, typography", "date": "2022-09-14 01:03:00 +0900", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "기타, 블로그", "tags": "blogging, google analytics, pageviews", "date": "2022-09-14 01:02:00 +0900", "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "게시글 작성 가이드", "url": "/posts/write-a-new-post/", "categories": "기타, 블로그", "tags": "blogging", "date": "2022-09-14 00:57:00 +0900", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "기타, 블로그", "tags": "blogging", "date": "2022-09-14 00:46:00 +0900", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustomizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsEnsure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. And then rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site: Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu. Push any commit to remote to trigger the GitHub Actions workflow. In the Actions tab of your repository, you should see the “Deploy Jekyll with GitHub Pages” workflow with at least one job running. Once the build is complete and successful, the site should be deployed automatically. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Vue 3 프로젝트 생성 및 개발환경 세팅하기", "url": "/posts/vue-quick-start/", "categories": "프론트엔드, Vue 3", "tags": "vue3, typescript, pinia, vite", "date": "2022-05-17 00:00:00 +0900", "snippet": "Vue 프로젝트 생성하기vue 프로젝트를 생성하는 작업은 매우 쉽다.현재 글을 작성하고 있는 2022-05-17 을 기준으로 Vue 공식 홈페이지의 Quick Start 에서 보면 아래 명령어로 프로젝트를 생성하면 다음과 같은 초기 세팅을 선택할 수 있다.&gt; npm init vue@latestVue.js - The Progressive JavaScript Framework√ Project name: ... test-project√ Add TypeScript? ... Yes√ Add JSX Support? ... No√ Add Vue Router for Single Page Application development? ... Yes√ Add Pinia for state management? ... Yes√ Add Vitest for Unit Testing? ... Yes√ Add Cypress for End-to-End testing? ... Yes√ Add ESLint for code quality? ... Yes√ Add Prettier for code formatting? ... Yes확장 스크립트를 제외하고 모든 선택지에 Yes 를 했을 경우의 프로젝트 구조다.가장 눈에 띄는 건 번들러로 vite 가 쓰였다는 점이다. 기존 프로젝트에서 쓰인 vue-cli 에 비해 미리보기 빌드 속도가 무려 10배 이상 빨라졌다. 이는 vite 가 어떤 모듈이 수정될 경우 수정된 모듈과 관련된 부분만을 교체하기 때문이다. 그래서 앱 사이즈가 커져도 갱신 시간에 영향을 끼치지 않는다. 이는 프로젝트 크기가 커질수록 빌드 시간이 느려지는 vue-cli 와 비교하면 큰 이점이다.두번째로는 store 로 vuex 대신 pinia 가 쓰였다. vuex 와 비교했을 때 큰 차이점은 mutations 가 없다는 것이었다! 이는 추후에 상세히 다뤄볼 예정이다.그 밖에 Unit Test 를 할 수 있는 Vitest 와 End-to-End Test 를 할 수 있는 cypress 가 추가되었다.개발환경 세팅하기ide 는 당연하지만 vscode 를 사용했다. 타입스크립트를 사용함으로써 타입 추론과 문법 검증이 가능해지면서 ide 의 자동완성 기능이 고도화되어 개발 생산성을 상당히 높힐 수 있었다. 하지만 프로젝트 초기 세팅만으로는 거슬리는 부분이 일부 있었는데, 다음과 같이 해결했다. ts 파일에서 vue 파일 import 시 red line 이 발생하는 현상 /* eslint-disable */declare module \"*.vue\" { import type { DefineComponent } from \"vue\"; const component: DefineComponent&lt;{}, {}, any&gt;; export default component;} 위와 같이 shims-vue.d.ts 파일을 추가해주는 것으로 해결했다. Delete ␍eslint(prettier/prettier) 경고가 발생하는 현상 해당 경고는 prettier 2 버전부터 endOfLine 의 기본값이 lf 로 변경돼서 윈도우 개발환경에서 발생한다. .gitattributes 나 별도 git config 수정이 없을 경우 윈도우 환경에서는 원격 저장소에서 받아올 때 개행문자를 crlf 로 바꿔서 가져온다. 그렇다고 git 설정을 바꾸기는 귀찮으니 .eslintrc.cjs 에서 rules 을 추가해 prettier 의 endOfLine 설정을 auto 로 바꿔주자. { \"rules\": { \"prettier/prettier\": [ \"error\", { \"endOfLine\": \"auto\" } ] }} vue 파일에서 import 시 모듈을 찾지 못 하는 현상 { \"compilerOptions\": { \"baseUrl\": \".\", \"paths\": { \"@/*\": [\"src/*\"] } }} compilerOptions 설정을 추가해준다. 편리한 Vscode 확장 프로그램 Auto Close TagHTML 태그를 선언할 때 자동으로 닫아준다. Auto Rename TagHTML 태그를 수정할 때 닫는 태그도 함께 자동으로 수정해준다. ESLint &amp; Prettier - Code formatter이 두 개는 필수!! .eslintrc.js 파일을 읽어 코드 스타일을 강제해준다. 특히 협업할 때 중요하다. macOS: ⌘ + ,, Windows: Ctrl + ,, Linux: Ctrl + , 로 vscode settings.json 을 열어서 \"editor.formatOnSave\": true 를 추가하면 저장할 때 자동으로 포맷팅된다. Markdown Preview Github Stylingmd 파일을 프리뷰 해준다. README.md 등을 작성할 때 편리하다. Veturvue 파일의 코드를 하이라이팅해준다. 거의 필수(?) Vue 3 Snippetsvue 의 template, script, style 등을 한 방에 생성해준다. 특히 타입스크립트 사용할 경우 거의 필수!" }, { "title": "JetBrain 계열의 IDE 실행이 안 되는 현상", "url": "/posts/jetbrains-start-app-errors/", "categories": "기타, 에러해결", "tags": "jetbrain, error", "date": "2022-05-04 00:00:00 +0900", "snippet": "JetBrain 계열의 IDE 를 실행해도 로고만 뜬다최근 윈도우 환경에서 JetBrain 계열 IDE 를 사용할 때 실행조차 되지않고 꺼지거나 로고만 뜨는 경우가 빈번하게 일어났다.원인을 몰랐을 때, 그냥 캐시 파일들을 지워보거나 IDE 를 재설치 해보거나 재부팅을 해보거나 등등… 여러가지를 시도해봤지만 문제는 전혀 해결되지않았었다. 그러던 중 신기하게도 윈도우 업데이트를 하니까 정상 동작하는걸 경험했다. …그러나 오래가지 못 해 다시 똑같은 현상이 발생했다 ㅡㅡ;;본격적으로 원인을 찾아보니 다음과 같은 에러가 로깅되어있었다.Internal error. Please refer to https://jb.gg/ide/critical-startup-errorscom.intellij.ide.plugins.StartupAbortedException: Cannot start app at com.intellij.idea.StartupUtil.lambda$start$15(StartupUtil.java:263) at java.base/java.util.concurrent.CompletableFuture.uniExceptionally(CompletableFuture.java:986) at java.base/java.util.concurrent.CompletableFuture$UniExceptionally.tryFire(CompletableFuture.java:970) at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506) at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1705) at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1692) at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290) at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020) at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656) at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594) at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)Caused by: java.net.BindException: Address already in use: bind at java.base/sun.nio.ch.Net.bind0(Native Method) at java.base/sun.nio.ch.Net.bind(Net.java:459) at java.base/sun.nio.ch.Net.bind(Net.java:448) at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227) at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:134) at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562) at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1334) at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:506) at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:491) at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:973) at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:260) at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:356) at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164) at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:503) at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986) at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:829)Caused by: java.net.BindException: Address already in use: bind 원인은 JetBrain 사의 IDE 가 사용하는 포트를 hyper-v 가 점유하고 있어서 실행이 안 되는거였다.해결방법 cmd 를 관리자모드로 실행 hyper-v 비활성화 dism.exe /Online /Disable-Feature:Microsoft-Hyper-V hyper-v 에 다른 포트를 할당 netsh int ipv4 add excludedportrange protocol=tcp startport=50151 numberofports=1 hyper-v 재활성화 dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All 3번에서 만약 The process cannot access the file because it is being used by another process. 메세지를 반환하면 startport=50151 부분을 다른 포트로 변경해줘야한다. Ok. 가 떴다면 정상으로 변경된 것이다." }, { "title": "Markdown 작성 방법", "url": "/posts/mark-down/", "categories": "기타, 블로그", "tags": "blogging, markdown", "date": "2022-04-18 00:10:00 +0900", "snippet": "1. 마크다운에 관하여1.1. 마크다운이란?Markdown은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다.마크다운이 최근 각광받기 시작한 이유는 깃헙(https://github.com) 덕분이다. 깃헙의 저장소Repository에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다.1.2. 마크다운의 장-단점1.2.1. 장점1. 간결하다.2. 별도의 도구없이 작성가능하다.3. 다양한 형태로 변환이 가능하다.4. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.5. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.6. 지원하는 프로그램과 플랫폼이 다양하다.1.2.2. 단점1. 표준이 없다.2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.3. 모든 HTML 마크업을 대신하지 못한다.2. 마크다운 사용법(문법)2.1. 헤더Headers 큰제목: 문서 제목 This is an H1============= This is an H1 작은제목: 문서 부제목 This is an H2------------- This is an H2 글머리: 1~6까지만 지원# This is a H1## This is a H2### This is a H3#### This is a H4##### This is a H5###### This is a H6This is a H1This is a H2This is a H3This is a H4This is a H5This is a H6####### This is a H7(지원하지 않음)2.2. BlockQuote이메일에서 사용하는 &gt; 블럭인용문자를 이용한다.&gt; This is a first blockqute.&gt;\t&gt; This is a second blockqute.&gt;\t&gt;\t&gt; This is a third blockqute. This is a first blockqute. &gt; This is a second blockqute. &gt; &gt; This is a third blockqute.이 안에서는 다른 마크다운 요소를 포함할 수 있다. This is a H3 List code 2.3. 목록● 순서있는 목록(번호)순서있는 목록은 숫자와 점을 사용한다.1. 첫번째2. 두번째3. 세번째 첫번째 두번째 세번째현재까지는 어떤 번호를 입력해도 순서는 내림차순으로 정의된다.1. 첫번째3. 세번째2. 두번째 첫번째 세번째 두번째● 순서없는 목록(글머리 기호: *, +, - 지원)* 빨강 * 녹색 * 파랑+ 빨강 + 녹색 + 파랑- 빨강 - 녹색 - 파랑 빨강 녹색 파랑 빨강 녹색 파랑 빨강 녹색 파랑 혼합해서 사용하는 것도 가능하다* 1단계 - 2단계 + 3단계 + 4단계 1단계 2단계 3단계 4단계 2.4. 코드4개의 공백 또는 하나의 탭으로 들여쓰기를 만나면 변환되기 시작하여 들여쓰지 않은 행을 만날때까지 변환이 계속된다.2.4.1. 들여쓰기This is a normal paragraph: This is a code block.end code block.실제로 적용해보면,적용예:This is a normal paragraph:This is a code block.end code block. 한줄 띄어쓰지 않으면 인식이 제대로 안되는 문제가 발생합니다.This is a normal paragraph: This is a code block.end code block.적용예:This is a normal paragraph:This is a code block.end code block.2.4.1. 코드블럭코드블럭은 다음과 같이 2가지 방식을 사용할 수 있습니다: &lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt; 이용방식&lt;pre&gt;&lt;code&gt;public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}&lt;/code&gt;&lt;/pre&gt;public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }} 코드블럭코드(“```”) 을 이용하는 방법```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}깃헙에서는 코드블럭코드(“```”) 시작점에 사용하는 언어를 선언하여 문법강조(Syntax highlighting)이 가능하다.```javapublic class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}2.5. 수평선 &lt;hr/&gt;아래 줄은 모두 수평선을 만든다. 마크다운 문서를 미리보기로 출력할 때 페이지 나누기 용도로 많이 사용한다.* * *********- - ---------------------------------------- 적용예2.6. 링크 참조링크[link keyword][id][id]: URL \"Optional Title here\"// codeLink: [Google][googlelink][googlelink]: https://google.com \"Go google\"Link: Google 외부링크사용문법: [Title](link)적용예: [Google](https://google.com, \"google link\")Link: Google 자동연결일반적인 URL 혹은 이메일주소인 경우 적절한 형식으로 링크를 형성한다.* 외부링크: &lt;http://example.com/&gt;* 이메일링크: &lt;address@example.com&gt; 외부링크: http://example.com/ 이메일링크: address@example.com2.7. 강조*single asterisks*_single underscores_**double asterisks**__double underscores__~~cancelline~~ single asterisks single underscores double asterisks double underscores cancelline 문장 중간에 사용할 경우에는 **띄어쓰기** 를 사용하는 것이 좋다.문장 중간에 사용할 경우에는 띄어쓰기를 사용하는 것이 좋다.2.8. 이미지![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg \"Optional title\")사이즈 조절 기능은 없기 때문에 &lt;img width=\"\" height=\"\"&gt;&lt;/img&gt;를 이용한다.예&lt;img src=\"/path/to/img.jpg\" width=\"450px\" height=\"300px\" title=\"px(픽셀) 크기 설정\" alt=\"RubberDuck\" /&gt;&lt;br/&gt;&lt;img src=\"/path/to/img.jpg\" width=\"40%\" height=\"30%\" title=\"px(픽셀) 크기 설정\" alt=\"RubberDuck\" /&gt;2.9. 줄바꿈3칸 이상 띄어쓰기( )를 하면 줄이 바뀐다.* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.이렇게* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.___\\\\ 띄어쓰기이렇게 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게 ○ 참고문서 마크다운 markdown 작성법" }, { "title": "기술 블로그 시작!", "url": "/posts/start-blog/", "categories": "기타, 블로그", "tags": "blogging", "date": "2022-04-18 00:00:00 +0900", "snippet": "시작하며…나와 나의 팀원들과 또 다른 누군가에게 도움이 되길 바랍니다." } ]
